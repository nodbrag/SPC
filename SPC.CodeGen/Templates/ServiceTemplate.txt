/**
*┌──────────────────────────────────────────────────────────────┐
*│　描    述：{Comment}                                                    
*│　作    者：{Author}                                            
*│　版    本：1.0    模板代码自动生成                                                
*│　创建时间：{GeneratorTime}                             
*└──────────────────────────────────────────────────────────────┘
*┌──────────────────────────────────────────────────────────────┐
*│　命名空间： {ServicesNamespace}                                  
*│　类    名： {ModelName}Service                                    
*└──────────────────────────────────────────────────────────────┘
*/
using System;
using System.Collections.Generic;
using System.Text;
using SPC.IService;
using SPC.Models.DtoModel;
using SPC.Models.DataModel;
using SPC.Core.Dtos;
using SPC.Core.Extensions;
using System.Reflection;
using System.Linq;
using SPC.Core.Attribute;
using SPC.Core.Utility;
using SPC.Core.Models;
using Microsoft.EntityFrameworkCore;

namespace SPC.Service
{
    public class {ModelName}Service : I{ModelName}Service
    {
        private readonly SPCContext _context;

        public {ModelName}Service(SPCContext context)
        {
            this._context = context;
        }

        public void Create{ModelName}({ModelName}Dtos.{ModelName}Dto model)
        {
            _context.{ModelName}.Add(model.MapTo<{ModelName}>());
            _context.SaveChanges();
        }

        public void Delete{ModelName}(int id)
        {
            {ModelName} entity= _context.{ModelName}.Find(id);
            if (entity == null)
                throw new Exception("编号为" + id + "的{ModelName}不存在!");
            _context.Remove(entity);
            _context.SaveChanges();
        }

        public {ModelName}Dtos.{ModelName}Dto Get{ModelName}ByID(int id)
        {
            {ModelName} entity = _context.{ModelName}.Find(id);
            if (entity == null)
                throw new Exception("编号为" + id + "的{ModelName}不存在!");
            return entity.MapTo<{ModelName}Dtos.{ModelName}Dto>();
        }

        public List<{ModelName}Dtos.{ModelName}Dto> Get{ModelName}List()
        {
            return _context.{ModelName}.Select<{ModelName}Dtos.{ModelName}Dto>().AsNoTracking().ToList();
        }

        public Tuple<List<{ModelName}Dtos.{ModelName}Dto>, int> Get{ModelName}ListForPagination(FiterConditionBase<{ModelName}Dtos.{ModelName}FilterDto> fiterCondition)
        {
            var query = _context.{ModelName}.AsNoTracking();
            List<Filter> Filters = FilterCondition.GetFilters(fiterCondition);
            if (Filters.Count > 0)
                foreach (var item in Filters)
                    query = query.Where(LambdaProvider.GetLambdaByFilter<{ModelName}>(item));

            if (fiterCondition.Sortings != null && fiterCondition.Sortings.Count > 0)
            {
                IOrderedQueryable<{ModelName}> sortquery = query.SortBy(fiterCondition.Sortings);
                if (sortquery != null)
                    query = sortquery;
            }

            return query.Select<{ModelName}Dtos.{ModelName}Dto>().GetAllList(fiterCondition.SkipCount, fiterCondition.MaxResultCount);
        }

        public void Update{ModelName}({ModelName}Dtos.{ModelName}Dto model)
        {
             _context.{ModelName}.Update(model.MapTo<{ModelName}>());
            _context.SaveChanges();
        }
    }
}
